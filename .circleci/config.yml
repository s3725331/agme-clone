version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.3.0
  node: circleci/node@4.0.0

jobs:
  build_and_deploy_back:
    working_directory: ~/circleCI/BackEnd/agme
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      ECR_REPOSITORY_NAME: agme
      FULL_IMAGE_NAME: 245724248690.dkr.ecr.us-east-1.amazonaws.com/agme:latest
    steps:
      - checkout:
          path: ~/circleCI
      - setup_remote_docker
      #       - run:
      #           name: Setup common environment variables
      #           command: |
      #             echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
      #             echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:latest"' >> $BASH_ENV


      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}

      - run: mvn package # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
        # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

      - run:
          name: Install dependencies for AWS
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            sudo apt-get install python3-pip
            sudo pip3 install --upgrade awscli
      - run:
          name: Build image
          command: |
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Push image
          command: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 245724248690.dkr.ecr.us-east-1.amazonaws.com
            docker push $FULL_IMAGE_NAME
  build_and_deploy_front:
    working_directory: ~/circleCI/FrontEnd/agme_react/my-app
    executor: node/default
    environment:
      ECR_REPOSITORY_NAME: agme-front
      FULL_IMAGE_NAME: 245724248690.dkr.ecr.us-east-1.amazonaws.com/agme-front:latest
    steps:
      - checkout:
          path: ~/circleCI
      - setup_remote_docker
      # Install the latest npm - the node Orb takes care of it
      - node/install-npm
      # Install dependencies - the node Orb take care of installation and dependency caching
      - node/install-packages:
          app-dir: ~/circleCI/FrontEnd/agme_react/my-app
          cache-path: node_modules
          override-ci-command: npm i


      - run:
          name: Install dependencies for AWS
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            sudo apt-get install python3-pip
            sudo pip3 install --upgrade awscli
      - run:
          name: Build image
          command: |
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Push image
          command: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 245724248690.dkr.ecr.us-east-1.amazonaws.com
            docker push $FULL_IMAGE_NAME

workflows:
  build-deploy-qa:
    jobs:
      - build_and_deploy_back:
          filters:
            branches:
              only: master
      - build_and_deploy_front:
          filters:
            branches:
              only: master
